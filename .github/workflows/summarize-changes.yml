name: Summarize Changes and Detect Issues

on:
  push:
    branches:
      - main  # Adjust to your target branch

jobs:
  analyze_changes:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 2  # Need at least 2 commits for diff

    - name: Get commit info
      id: commit_info
      run: |
        AUTHOR=$(git log -1 --pretty=format:'%an')
        COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        echo "author=$AUTHOR" >> $GITHUB_OUTPUT
        echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT
        echo "Commit Author: $AUTHOR"
        echo "Commit Message: $COMMIT_MSG"

    - name: Summarize code changes
      id: summarize_changes
      run: |
        git diff HEAD^ HEAD > changes.diff
        echo "changes<<EOF" >> $GITHUB_OUTPUT
        cat changes.diff >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci || npm install

    - name: Run linter
      id: run_linter
      run: |
        npx eslint . --format json > eslint_results.json || true
        echo "linter_issues<<EOF" >> $GITHUB_OUTPUT
        cat eslint_results.json >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create issue with summary
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          const changes = fs.readFileSync('changes.diff', 'utf8');
          let lintResults = '';
          try {
            const lintData = fs.readFileSync('eslint_results.json', 'utf8');
            const lintJson = JSON.parse(lintData);
            lintResults = JSON.stringify(lintJson, null, 2);
          } catch (error) {
            lintResults = 'No linting results available';
          }
          
          const author = process.env.COMMIT_AUTHOR;
          const commitMsg = process.env.COMMIT_MSG;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Code Review for commit ${context.sha.substring(0, 7)} by ${author}`,
            body: `
            ## Code Review for Recent Changes
            
            Author: ${author}
            Commit Message: ${commitMsg}
            
            ### Summary of Changes
            
            \`\`\`diff
            ${changes}
            \`\`\`
            
            ### Linting Issues
            
            \`\`\`json
            ${lintResults}
            \`\`\`
            
            Commit: ${context.sha}
            `
          });
        env:
          COMMIT_AUTHOR: ${{ steps.commit_info.outputs.author }}
          COMMIT_MSG: ${{ steps.commit_info.outputs.commit_msg }}