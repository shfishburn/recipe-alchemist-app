name: Summarize Changes and Detect Issues

on:
  push:
    branches: [main]
    paths-ignore:
      - '**/dependabot/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**/dependabot/**'
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  issues: write

jobs:
  analyze_changes:
    if: ${{ (github.event_name == 'push' && github.actor != 'dependabot[bot]') || (github.event_name == 'pull_request' && !startsWith(github.head_ref, 'dependabot/')) }}
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get commit info
        id: commit_info
        run: |
          AUTHOR=$(git log -1 --pretty=format:'%an')
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          # Install required npm packages for analysis
          npm install -g diff2html-cli
          npm install @octokit/rest axios

      - name: Summarize code changes
        id: summarize_changes
        run: |
          BEFORE=${{ github.event.before || github.event.pull_request.base.sha || '0000000000000000000000000000000000000000' }}
          AFTER=${{ github.event.after || github.event.pull_request.head.sha }}

          echo "Comparing changes between $BEFORE and $AFTER"

          if [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            git diff-tree --name-status -r $AFTER > changes_summary.txt
            git diff-tree -p $AFTER > changes.diff
          else
            git diff $BEFORE $AFTER --name-status > changes_summary.txt
            git diff $BEFORE $AFTER > changes.diff
          fi

          # Check if diff file was created successfully
          if [ ! -s changes.diff ]; then
            echo "Warning: changes.diff file is empty or not created"
            echo "Creating an empty diff file to prevent errors"
            echo "No changes detected" > changes.diff
          fi

          # Output the first few lines of the diff for debugging
          echo "First 10 lines of diff file:"
          head -n 10 changes.diff || echo "Cannot display diff content"
          echo "Diff file size: $(wc -c < changes.diff) bytes"

          # Generate detailed highlights of added, removed, or modified lines
          if command -v diff2html >/dev/null 2>&1; then
            diff2html --summary --input-file changes.diff --output-format line-by-line > detailed_summary.html || echo "diff2html generation failed"
          else
            echo "diff2html command not found, skipping HTML generation"
            echo "<p>HTML diff view not available</p>" > detailed_summary.html
          fi

      - name: Upload full diff as artifact
        uses: actions/upload-artifact@v4
        with:
          name: full-diff
          path: changes.diff

      - name: Verify OpenAI API key
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "::warning::OPENAI_API_KEY is not set. OpenAI analysis will be skipped."
          else
            echo "OpenAI API key is properly configured."
          fi

      - name: Generate OpenAI code analysis
        id: openai_analysis
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "OPENAI_API_KEY is not set. Skipping OpenAI analysis."
            echo "No OpenAI analysis available - API key not configured" > openai_analysis.txt
          else
            echo "Generating AI code analysis..."
            node ./.github/workflows/scripts/analyze-with-openai.js

            # Check if the script succeeded
            if [ $? -ne 0 ]; then
              echo "::warning::OpenAI analysis script failed with an error"
            fi

            # Create fallback file if analysis failed
            if [ ! -f openai_analysis.txt ]; then
              echo "::warning::OpenAI analysis did not generate output file"
              echo "OpenAI analysis failed to generate output" > openai_analysis.txt
            fi

            # Output the first few lines of the analysis for debugging
            echo "First few lines of OpenAI analysis:"
            head -n 5 openai_analysis.txt || echo "Cannot display analysis content"
          fi
        env:
          CHANGES_DIFF: ${{ github.workspace }}/changes.diff
          NODE_OPTIONS: --no-warnings

      - name: Analyze changes for suggestions
        run: |
          BEFORE=${{ github.event.before || github.event.pull_request.base.sha || '0000000000000000000000000000000000000000' }}
          AFTER=${{ github.event.after || github.event.pull_request.head.sha }}

          CHANGED_FILES=$(git diff --name-only $BEFORE $AFTER | grep -E "\.(js|ts|jsx|tsx)$" || true)
          if [ -z "$CHANGED_FILES" ]; then
            echo "No JS/TS files changed."
            echo "{}" > suggestions.json
          else
            echo "Analyzing the following files for suggestions:"
            echo "$CHANGED_FILES"
            if command -v npx eslint >/dev/null 2>&1; then
              npx eslint $CHANGED_FILES --format json > eslint_report.json || echo "ESLint failed, continuing workflow"
              cat eslint_report.json | jq '.[] | {filePath, messages}' > suggestions.json || echo "JQ processing failed"
            else
              echo "ESLint not available, skipping linting"
              echo "{}" > suggestions.json
            fi
          fi

      - name: Lint JavaScript/TypeScript files
        id: linting
        run: |
          BEFORE=${{ github.event.before || github.event.pull_request.base.sha || '0000000000000000000000000000000000000000' }}
          AFTER=${{ github.event.after || github.event.pull_request.head.sha }}

          CHANGED_FILES=$(git diff --name-only $BEFORE $AFTER | grep -E "\.(js|ts|jsx|tsx)$" || true)
          if [ -z "$CHANGED_FILES" ]; then
            echo "No JS/TS files changed."
            echo "{}" > eslint_issues.json
          else
            echo "Linting the following files:"
            echo "$CHANGED_FILES"
            if command -v npx eslint >/dev/null 2>&1; then
              npx eslint $CHANGED_FILES --format json > eslint_issues.json || echo "ESLint failed, continuing workflow"
            else
              echo "ESLint not available, skipping linting"
              echo "{}" > eslint_issues.json
            fi
          fi

      - name: Create issue with summary
        uses: actions/github-script@v6
        env:
          AUTHOR: ${{ steps.commit_info.outputs.author || 'Unknown Author' }}
          COMMIT_MSG: ${{ steps.commit_info.outputs.commit_msg || 'No commit message available' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            let summary = 'No summary available';
            if (fs.existsSync('changes_summary.txt')) {
              summary = fs.readFileSync('changes_summary.txt', 'utf8');
            }

            let detailedHighlights = 'No highlights available';
            if (fs.existsSync('detailed_summary.html')) {
              detailedHighlights = fs.readFileSync('detailed_summary.html', 'utf8');
            }

            let eslintIssues = 'No linting issues found';
            try {
              if (fs.existsSync('eslint_issues.json')) {
                const issuesContent = fs.readFileSync('eslint_issues.json', 'utf8');
                if (issuesContent && issuesContent.trim() !== '{}') {
                  eslintIssues = JSON.parse(issuesContent);
                }
              }
            } catch (err) {
              console.error('Error parsing ESLint issues:', err);
              eslintIssues = 'Error parsing ESLint results';
            }

            let aiAnalysis = 'AI analysis not available';
            try {
              if (fs.existsSync('openai_analysis.txt')) {
                aiAnalysis = fs.readFileSync('openai_analysis.txt', 'utf8');
              }
            } catch (err) {
              console.error('Error reading AI analysis file:', err);
            }

            const issueBody = `
              ## Code Review for Recent Changes

              **Commit**: ${context.sha}
              **Author**: ${process.env.AUTHOR}
              **Message**: ${process.env.COMMIT_MSG}

              ### AI Code Analysis
              ${aiAnalysis}

              ### Summary of Changes
              \`\`\`
              ${summary}
              \`\`\`

              ### Detailed Highlights
              ${detailedHighlights}

              ### Linting Issues
              ${JSON.stringify(eslintIssues)}

              This issue was automatically generated by the workflow.
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Code Review for commit ${context.sha.substring(0,7)}`,
              body: issueBody,
              labels: ['automated-review']
            });
