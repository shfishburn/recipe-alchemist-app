name: Summarize Changes and Detect Issues

on:
  push:
    branches:
      - main  # Adjust to target branch or allow dynamic targeting
    paths-ignore:
      - '**/dependabot/**'  # Ignore Dependabot paths instead of branches

permissions:
  contents: read
  issues: write

jobs:
  analyze_changes:
    runs-on: ubuntu-latest
    # Additional safety check to skip Dependabot commits
    if: "!startsWith(github.head_ref, 'dependabot/')"

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Fetch only what's needed
        fetch-depth: 2

    - name: Get commit info
      id: commit_info
      run: |
        # Extract author and commit message
        AUTHOR=$(git log -1 --pretty=format:'%an')
        COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        echo "author=$AUTHOR" >> $GITHUB_OUTPUT
        echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT

    - name: Summarize code changes
      id: summarize_changes
      run: |
        # Summarize file changes
        echo "### Files Changed:" > changes_summary.txt
        git diff --name-status HEAD^ HEAD >> changes_summary.txt
        
        # Count lines added/removed and append to summary
        STATS=$(git diff --shortstat HEAD^ HEAD)
        echo -e "\n### Change Statistics:" >> changes_summary.txt
        echo "$STATS" >> changes_summary.txt
        
        # Generate diff for analysis
        git diff HEAD^ HEAD > changes.diff

    # Using continue-on-error to make the workflow more resilient
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
      continue-on-error: true

    - name: Install dependencies for linting
      run: |
        npm ci || npm install
      continue-on-error: true

    - name: Lint JavaScript/TypeScript files
      run: |
        CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E "\.(js|ts|jsx|tsx)$" || true)
        if [ -z "$CHANGED_FILES" ]; then
          echo "No JavaScript or TypeScript files changed."
        else
          echo "Linting the following files:"
          echo "$CHANGED_FILES"
          npx eslint $CHANGED_FILES || echo "Linting found issues but continuing"
        fi
      continue-on-error: true

    # Skipping OpenAI review since we can't access Supabase environment variables from GitHub Actions
    # We'll note this in the issue

    - name: Create issue with summary
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const fs = require('fs');

            // Read summary with proper error handling
            let changesSummary = 'No summary available';
            try {
              if (fs.existsSync('changes_summary.txt')) {
                changesSummary = fs.readFileSync('changes_summary.txt', 'utf8');
              }
            } catch (err) {
              console.error('Error reading changes summary:', err);
            }

            // Truncate the diff if it's too large
            let changes = 'No diff available';
            try {
              if (fs.existsSync('changes.diff')) {
                const diffContent = fs.readFileSync('changes.diff', 'utf8');
                changes = diffContent.length > 5000
                  ? diffContent.substring(0, 5000) + '\n... (truncated)'
                  : diffContent;
              }
            } catch (err) {
              console.error('Error reading diff:', err);
            }

            // Use simplified labels array to prevent issues
            const labels = [];
            try {
              // Check if labels exist in the repo before adding them
              const existingLabels = await github.rest.issues.listLabelsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const labelNames = existingLabels.data.map(label => label.name);
              
              if (labelNames.includes('automated-review')) {
                labels.push('automated-review');
              }
            } catch (err) {
              console.error('Error checking labels:', err);
              // Continue without labels if there's an error
            }

            // Create the GitHub issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Code Review for commit ${context.sha.substring(0, 7)}`,
              body: `
              ## Code Review for Recent Changes
              
              **Commit**: ${context.sha}
              **Author**: ${process.env.COMMIT_AUTHOR || 'Unknown'}
              **Message**: ${process.env.COMMIT_MSG || 'No commit message'}
              
              ### Summary of Changes
              
              ${changesSummary}
              
              > **Note**: The AI review is skipped in this workflow because the OpenAI API key is stored in Supabase environment variables, which are not accessible from GitHub Actions. To enable AI reviews, consider adding the OpenAI API key as a GitHub secret.
              
              ### Code Diff
              
              \`\`\`diff
              ${changes}
              \`\`\`

              This issue was automatically generated by the GitHub Actions workflow.
              `,
              labels: labels,
            });

            console.log(`Issue created: ${issue.data.html_url}`);
          } catch (error) {
            console.error(`Failed to create issue: ${error.message}`);
            // Don't fail the workflow even if issue creation fails
          }
        env:
          COMMIT_AUTHOR: ${{ steps.commit_info.outputs.author }}
          COMMIT_MSG: ${{ steps.commit_info.outputs.commit_msg }}
