name: Summarize Changes and Detect Issues

on:
  push:
    branches-ignore:
      - 'dependabot/**'  # Ignore Dependabot branches
    branches:
      - main  # Adjust to target branch or allow dynamic targeting

permissions:
  contents: read
  issues: write

jobs:
  analyze_changes:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Fetch only what's needed
        fetch-depth: 2

    - name: Get commit info
      id: commit_info
      run: |
        # Extract author and commit message
        AUTHOR=$(git log -1 --pretty=format:'%an')
        COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        echo "author=$AUTHOR" >> $GITHUB_OUTPUT
        echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT

    - name: Summarize code changes
      id: summarize_changes
      run: |
        # Summarize file changes
        echo "### Files Changed:" > changes_summary.txt
        git diff --name-status HEAD^ HEAD >> changes_summary.txt
        
        # Count lines added/removed and append to summary
        STATS=$(git diff --shortstat HEAD^ HEAD)
        echo -e "\n### Change Statistics:" >> changes_summary.txt
        echo "$STATS" >> changes_summary.txt
        
        # Generate diff for analysis
        git diff HEAD^ HEAD > changes.diff

    - name: Run ESLint on changed files
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install dependencies for linting
      run: npm ci
    - name: Lint JavaScript/TypeScript files
      run: |
        CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E "\.(js|ts|jsx|tsx)$" || true)
        if [ -z "$CHANGED_FILES" ]; then
          echo "No JavaScript or TypeScript files changed."
        else
          echo "Linting the following files:"
          echo "$CHANGED_FILES"
          npx eslint $CHANGED_FILES
        fi

    - name: AI Code Review
      id: ai_review
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Check if diff file exists and is not empty
        if [ -s changes.diff ]; then
          DIFF_CONTENT=$(cat changes.diff)
          
          # Call OpenAI API for code review
          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4",
              "prompt": "Review the following code changes for issues and improvements:\n\n'"$DIFF_CONTENT"'",
              "max_tokens": 500,
              "temperature": 0.7
            }')

          # Extract the review content from the response
          REVIEW=$(echo $RESPONSE | jq -r '.choices[0].text')
          echo "$REVIEW" > ai_review.txt
        else
          echo "No changes detected to review." > ai_review.txt
        fi

    - name: Create issue with summary and AI review
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');

          // Read summary and AI review
          const changesSummary = fs.existsSync('changes_summary.txt')
            ? fs.readFileSync('changes_summary.txt', 'utf8')
            : 'No summary available';
          
          const aiReview = fs.existsSync('ai_review.txt')
            ? fs.readFileSync('ai_review.txt', 'utf8')
            : 'No AI review available';

          // Truncate the diff if itâ€™s too large
          const diffPath = 'changes.diff';
          let changes = '';
          if (fs.existsSync(diffPath)) {
            const diffContent = fs.readFileSync(diffPath, 'utf8');
            changes = diffContent.length > 5000
              ? diffContent.substring(0, 5000) + '\n... (truncated)'
              : diffContent;
          } else {
            changes = 'No diff available.';
          }

          // Create the GitHub issue
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Code Review for commit ${context.sha.substring(0, 7)}`,
            body: `
            ## Code Review for Recent Changes
            
            **Commit**: ${context.sha}
            **Author**: ${process.env.COMMIT_AUTHOR || 'Unknown'}
            **Message**: ${process.env.COMMIT_MSG || 'No commit message'}
            
            ### Summary of Changes
            
            ${changesSummary}
            
            ### AI Review
            
            ${aiReview}
            
            ### Code Diff
            
            \`\`\`diff
            ${changes}
            \`\`\`

            This issue was automatically generated by the GitHub Actions workflow.
            `,
            labels: ['automated-review', 'ai-review'],
          });

          console.log(`Issue created: ${issue.data.html_url}`);
        env:
          COMMIT_AUTHOR: ${{ steps.commit_info.outputs.author }}
          COMMIT_MSG: ${{ steps.commit_info.outputs.commit_msg }}