name: Summarize Changes and Detect Issues

on:
  push:
    branches:
      - main

permissions:
  contents: read
  issues: write

jobs:
  analyze_changes:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'dependabot')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
      continue-on-error: false

    - name: Get commit info
      id: commit_info
      run: |
        AUTHOR=$(git log -1 --pretty=format:'%an')
        COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        echo "author=$AUTHOR" >> $GITHUB_OUTPUT
        echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT
      continue-on-error: false

    - name: Summarize code changes
      id: summarize_changes
      run: |
        echo "### Files Changed:" > changes_summary.txt
        git diff --name-status HEAD^ HEAD | grep -v "package-lock.json" >> changes_summary.txt

        STATS=$(git diff --shortstat HEAD^ HEAD)
        echo -e "\n### Change Statistics:" >> changes_summary.txt
        echo "$STATS" >> changes_summary.txt

        git diff HEAD^ HEAD --diff-filter=AM | grep -v "package-lock.json" > changes.diff
      continue-on-error: false

    - name: Create issue with summary
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const fs = require('fs');
            const path = require('path');

            let changesSummary = '';
            try {
              if (fs.existsSync('changes_summary.txt')) {
                changesSummary = fs.readFileSync('changes_summary.txt', 'utf8');
              }
            } catch (err) {
              changesSummary = 'Error reading changes summary: ' + err.message;
            }
            
            let changes = '';
            try {
              if (fs.existsSync('changes.diff')) {
                const diffContent = fs.readFileSync('changes.diff', 'utf8');
                changes = diffContent.length > 10000 
                  ? diffContent.substring(0, 10000) + '\n... (truncated - see full diff in workflow artifacts)'
                  : diffContent;
              }
            } catch (err) {
              changes = 'Error reading diff: ' + err.message;
            }

            const issueResponse = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Code Review for commit ${context.sha.substring(0, 7)}`,
              body: `
              ## Code Review for Recent Changes
              
              **Commit**: ${context.sha}  
              **Author**: ${process.env.COMMIT_AUTHOR || 'Unknown'}  
              **Message**: ${process.env.COMMIT_MSG || 'No commit message'}
              
              ### Summary of Changes
              ${changesSummary || 'No summary available'}
              
              ### Code Diff
              \`\`\`diff
              ${changes || 'No diff available'}
              \`\`\`

              [View full diff artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

              _This issue was automatically generated by the GitHub Actions workflow._
              `,
              labels: ['automated-review']
            });

            console.log(`Issue created successfully: ${issueResponse.data.html_url}`);
          } catch (error) {
            console.error(`Failed to create issue: ${error.message}`);
          }
        env:
          COMMIT_AUTHOR: ${{ steps.commit_info.outputs.author }}
          COMMIT_MSG: ${{ steps.commit_info.outputs.commit_msg }}
      continue-on-error: false

    - name: Upload full diff as artifact
      uses: actions/upload-artifact@v3
      with:
        name: full-code-diff
        path: changes.diff
        retention-days: 7
      continue-on-error: false